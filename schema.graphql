type Chain @entity {
  "talisman-defined id for this substrate chain"
  id: ID!

  "is chain this a testnet?"
  isTestnet: Boolean!

  "index for sorting chains and evm networks in a user-friendly way"
  sortIndex: Int

  "hash of the first block on this chain"
  genesisHash: String

  "ss58 prefix for this chain"
  prefix: Int

  "talisman-defined name for this chain"
  name: String

  "url of the logo for this chain"
  logo: String

  "chain-specified name of this chain"
  chainName: String

  "implementation name for this chain"
  implName: String

  "specification name for this chain"
  specName: String

  "specification version for this chain"
  specVersion: String

  "native token for this chain"
  nativeToken: Token

  "other tokens on this chain"
  tokens: [Token!]! @derivedFrom(field: "squidImplementationDetailChain")

  "account format for this chain"
  account: String

  "subscan endpoint for this chain"
  subscanUrl: String

  "talisman-defined substrate rpcs for this chain"
  rpcs: [SubstrateRpc!]!

  "health status of this chain"
  isHealthy: Boolean!

  "balance metadata for this chain"
  balanceMetadata: [BalanceModuleMetadata!]!

  "evm networks on this chain"
  evmNetworks: [EvmNetwork!]! @derivedFrom(field: "substrateChain")

  "parathreads of this chain (if this chain is a relaychain)"
  parathreads: [Chain!]! @derivedFrom(field: "relay")

  "paraId of this chain (if this chain is a parachain for another chain)"
  paraId: Int

  "relaychain of this chain (if this chain is a parachain for another chain)"
  relay: Chain
}

type EvmNetwork @entity {
  "the chain identifier used for signing ethereum transactions"
  id: ID!

  "is this network a testnet?"
  isTestnet: Boolean!

  "index for sorting chains and evm networks in a user-friendly way"
  sortIndex: Int

  "talisman-defined name for this network"
  name: String

  "url of the logo for this network"
  logo: String

  "native token for this network"
  nativeToken: Token

  "other tokens on this network"
  tokens: [Token!]! @derivedFrom(field: "squidImplementationDetailEvmNetwork")

  "block explorer url for this network"
  explorerUrl: String

  "talisman-defined ethereum rpcs for this network"
  rpcs: [EthereumRpc!]!

  "health status of this network"
  isHealthy: Boolean!

  "balance metadata for this network"
  balanceMetadata: [BalanceModuleMetadata!]!

  "substrate chain this evm network runs on"
  substrateChain: Chain
}

type Token @entity {
  "talisman-defined id for this token"
  id: ID!

  "TODO: Put all token data into here (because we have plugins now)"
  data: JSON

  "implementation detail for relation lookups, can be removed once https://github.com/subsquid/squid/issues/41 is merged"
  squidImplementationDetailNativeToChains: [Chain!]! @derivedFrom(field: "nativeToken")
  "implementation detail for relation lookups, can be removed once https://github.com/subsquid/squid/issues/41 is merged"
  squidImplementationDetailNativeToEvmNetworks: [EvmNetwork!]! @derivedFrom(field: "nativeToken")

  "implementation detail for relation lookups, can be removed once https://github.com/subsquid/squid/issues/41 is merged"
  squidImplementationDetailChain: Chain
  "implementation detail for relation lookups, can be removed once https://github.com/subsquid/squid/issues/41 is merged"
  squidImplementationDetailEvmNetwork: EvmNetwork
}

type SubstrateRpc {
  "url of this substrate rpc"
  url: String!

  "health status of this substrate rpc"
  isHealthy: Boolean!
}

type EthereumRpc {
  "url of this ethereum rpc"
  url: String!

  "health status of this ethereum rpc"
  isHealthy: Boolean!
}

type BalanceModuleMetadata {
  moduleType: String!
  metadata: JSON!
}
